package Form;

import Form.ChiTietPhieuThue;
import Form.DangKyKhachMoi;
import database.KetNoi;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class ThuePhong extends javax.swing.JFrame {

    String manhanvien_Thuephong;
    
    public void setmanv(String manvString){
        manhanvien_Thuephong = manvString;
        setTitle("Nhân viên( Mã nhân viên: "+manhanvien_Thuephong+")");
        btnDangxuat.setText("Đăng xuất");
    }
    
    public void setMaQL(String manvString){
        manhanvien_Thuephong = manvString;
        setTitle("Nhân viên( Mã quản lý: "+manhanvien_Thuephong+")");
        btnDangxuat.setText("Quản lý");
    }
    
    public ThuePhong() {
        initComponents();
        setFocusable(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table_PhieuThuePhong = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        Makh2 = new javax.swing.JLabel();
        Makh3 = new javax.swing.JLabel();
        txtGhiChu = new javax.swing.JTextField();
        Makh5 = new javax.swing.JLabel();
        Makh1 = new javax.swing.JLabel();
        txtMP_ThuePhong = new javax.swing.JTextField();
        txtMKH_ThuePhong = new javax.swing.JTextField();
        btnThue_ThuePhong = new javax.swing.JButton();
        btSuaThongTinThue = new javax.swing.JButton();
        jDateDen = new com.toedter.calendar.JDateChooser();
        jDateDi = new com.toedter.calendar.JDateChooser();
        Makh7 = new javax.swing.JLabel();
        txtmaphieu = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btLuu = new javax.swing.JButton();
        Makh4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDSphong_ThuePhong = new javax.swing.JTable();
        label1 = new java.awt.Label();
        CapNhatPhongTrong = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableKH_ThuePhong = new javax.swing.JTable();
        txtSeachCCCD = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnTimCCCD_ThuePhong = new javax.swing.JButton();
        btThanhToan_ThuePhong = new javax.swing.JButton();
        btChiTietPhieuThue = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btLoadThuephong = new javax.swing.JButton();
        btchuatt = new javax.swing.JButton();
        btnLoadall = new javax.swing.JButton();
        btDoimatkhau = new javax.swing.JButton();
        btnDangxuat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        setName("LapPhieuThue"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1141, 803));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Table_PhieuThuePhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phiếu thuê", "Mã khách hàng", "Mã phòng", "Ngày đến", "Ngày đi", "Thanh toán", "Ghi chú"
            }
        ));
        Table_PhieuThuePhong.getTableHeader().setReorderingAllowed(false);
        Table_PhieuThuePhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_PhieuThuePhongMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_PhieuThuePhong);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        Makh2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Makh2.setText("Mã khách hàng");

        Makh3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Makh3.setText("Ngày đến");

        txtGhiChu.setPreferredSize(new java.awt.Dimension(65, 26));

        Makh5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Makh5.setText("Ghi chú");

        Makh1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Makh1.setText("Mã phòng");

        txtMP_ThuePhong.setEnabled(false);
        txtMP_ThuePhong.setPreferredSize(new java.awt.Dimension(65, 26));

        txtMKH_ThuePhong.setEnabled(false);
        txtMKH_ThuePhong.setPreferredSize(new java.awt.Dimension(65, 26));

        btnThue_ThuePhong.setText("Thuê");
        btnThue_ThuePhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThue_ThuePhongActionPerformed(evt);
            }
        });

        btSuaThongTinThue.setText("Sửa");
        btSuaThongTinThue.setEnabled(false);
        btSuaThongTinThue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuaThongTinThueActionPerformed(evt);
            }
        });

        jDateDen.setDateFormatString("yyyy- MM-dd");
        jDateDen.setPreferredSize(new java.awt.Dimension(65, 26));

        jDateDi.setDateFormatString("yyyy-MM-dd");
        jDateDi.setPreferredSize(new java.awt.Dimension(65, 26));

        Makh7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Makh7.setText("Mã phiếu thuê");

        txtmaphieu.setText("Tự đông");
        txtmaphieu.setEnabled(false);
        txtmaphieu.setPreferredSize(new java.awt.Dimension(65, 26));
        txtmaphieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmaphieuActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Lập phiếu thuê phòng");

        btLuu.setText("Lưu");
        btLuu.setEnabled(false);
        btLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLuuActionPerformed(evt);
            }
        });

        Makh4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Makh4.setText("Ngày đi");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(103, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Makh2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Makh3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Makh7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Makh4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Makh5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Makh1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMP_ThuePhong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMKH_ThuePhong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtmaphieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDateDi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateDen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(47, 47, 47))
                    .addComponent(txtGhiChu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(btnThue_ThuePhong, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btSuaThongTinThue, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtmaphieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Makh7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMKH_ThuePhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Makh2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMP_ThuePhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Makh1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateDen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Makh3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateDi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Makh4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Makh5))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThue_ThuePhong, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSuaThongTinThue, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        jPanel2.setBackground(new java.awt.Color(255, 204, 255));

        tableDSphong_ThuePhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Mã phòng", "Loại phòng", "Tình trạng", "Giá", "Ghi chú"
            }
        ));
        tableDSphong_ThuePhong.getTableHeader().setReorderingAllowed(false);
        tableDSphong_ThuePhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDSphong_ThuePhongMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableDSphong_ThuePhong);

        label1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        label1.setText("DANH SÁCH PHÒNG TRỐNG");

        CapNhatPhongTrong.setText("Cập nhật");
        CapNhatPhongTrong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CapNhatPhongTrongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(CapNhatPhongTrong, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CapNhatPhongTrong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(153, 255, 204));

        tableKH_ThuePhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã khách", "Tên khách", "Giới tính", "Địa chỉ"
            }
        ));
        tableKH_ThuePhong.getTableHeader().setReorderingAllowed(false);
        tableKH_ThuePhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableKH_ThuePhongMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableKH_ThuePhong);

        jButton1.setText("Đăng ký khách mới");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnTimCCCD_ThuePhong.setText("Tìm");
        btnTimCCCD_ThuePhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimCCCD_ThuePhongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSeachCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTimCCCD_ThuePhong)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSeachCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTimCCCD_ThuePhong))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btThanhToan_ThuePhong.setText("Thanh toán");
        btThanhToan_ThuePhong.setEnabled(false);
        btThanhToan_ThuePhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btThanhToan_ThuePhongActionPerformed(evt);
            }
        });

        btChiTietPhieuThue.setText("Chi tiết phiếu thuê");
        btChiTietPhieuThue.setEnabled(false);
        btChiTietPhieuThue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btChiTietPhieuThueActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabel2.setText("Thuê phòng");

        btLoadThuephong.setText("Cập nhật");
        btLoadThuephong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadThuephongActionPerformed(evt);
            }
        });

        btchuatt.setText("Chưa TT");
        btchuatt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btchuattActionPerformed(evt);
            }
        });

        btnLoadall.setText("Cập nhật");
        btnLoadall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadallActionPerformed(evt);
            }
        });

        btDoimatkhau.setText("Đổi mật khẩu");
        btDoimatkhau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDoimatkhauActionPerformed(evt);
            }
        });

        btnDangxuat.setText("Đăng xuất");
        btnDangxuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangxuatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btDoimatkhau, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(btnDangxuat, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btThanhToan_ThuePhong, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btChiTietPhieuThue, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(466, 466, 466)
                        .addComponent(btchuatt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(33, 33, 33)
                        .addComponent(btLoadThuephong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(463, 463, 463)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLoadall, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btDoimatkhau)
                    .addComponent(btnDangxuat))
                .addGap(46, 46, 46)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLoadall, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btChiTietPhieuThue)
                    .addComponent(btThanhToan_ThuePhong)
                    .addComponent(btchuatt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btLoadThuephong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void loadALL()
    {
        loadRoomData(); // Hiển thị dữ liệu phòng
        loadKhachHang(); // Hiển thị dữ liệu khách hàng
        updateTableThuePhong(); // Hiển thị dữ liệu phiếu thuê
        txtmaphieu.setText("");
        txtGhiChu.setText("");
        txtMKH_ThuePhong.setText("");
        txtMP_ThuePhong.setText("");
        txtSeachCCCD.setText("");
        jDateDen.setDate(null);
        jDateDi.setDate(null);
        
        jDateDen.setEnabled(true);
        jDateDi.setEnabled(true);
        txtGhiChu.setEnabled(true);
        btLuu.setEnabled(false);
        btSuaThongTinThue.setEnabled(false);
        btThanhToan_ThuePhong.setEnabled(false);
        btSuaThongTinThue.setText("Sửa");
        btnThue_ThuePhong.setEnabled(true);
        btChiTietPhieuThue.setEnabled(false);
    }
    
    private void tableKH_ThuePhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableKH_ThuePhongMouseClicked
        int row = tableKH_ThuePhong.getSelectedRow();
        btThanhToan_ThuePhong.setEnabled(false);
        btChiTietPhieuThue.setEnabled(false);
        int row1 = Table_PhieuThuePhong.getSelectedRow();
        if(row1 != -1){
            return;
        }
        else if (row != -1){
             {
                String makhachhang = (String) tableKH_ThuePhong.getValueAt(row, 0);
                txtMKH_ThuePhong.setText(makhachhang);
            }
        }        
    }//GEN-LAST:event_tableKH_ThuePhongMouseClicked

    private void tableDSphong_ThuePhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDSphong_ThuePhongMouseClicked
        int row = tableDSphong_ThuePhong.getSelectedRow();
        if("Huỷ".equals(btSuaThongTinThue.getText())){
            if (row != -1) {
                String maphong = (String) tableDSphong_ThuePhong.getValueAt(row, 0);
                txtMP_ThuePhong.setText(maphong);
            }
        }
        else
        {
            int row1 = Table_PhieuThuePhong.getSelectedRow();
            if(row1 != -1){
                return;
            }
            else{
                if (row != -1) {
                    String maphong = (String) tableDSphong_ThuePhong.getValueAt(row, 0);
                    txtMP_ThuePhong.setText(maphong);
                }
            }
        }
    }//GEN-LAST:event_tableDSphong_ThuePhongMouseClicked

    private void btnTimCCCD_ThuePhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimCCCD_ThuePhongActionPerformed
        String searchCCCD = txtSeachCCCD.getText().trim();
        btChiTietPhieuThue.setEnabled(false);
        btThanhToan_ThuePhong.setEnabled(false);
        if (searchCCCD.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập CCCD!");
            return;
        }

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = KetNoi.ketNoi(); // Thay thế bằng phương thức thực tế để kết nối cơ sở dữ liệu của bạn
            String sql = "SELECT makh, tenkh, gioitinh, diachi, cmnd FROM khachhang WHERE cmnd = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, searchCCCD);
            rs = pstmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tableKH_ThuePhong.getModel(); // Giả sử bảng của bạn tên là KH_ThuePhong
            model.setRowCount(0); // Xóa tất cả các hàng hiện tại trong bảng

            boolean found = false;
            while (rs.next()) {
                String makh = rs.getString("makh");
                String tenkh = rs.getString("tenkh");
                String gioitinh = rs.getString("gioitinh");
                String diachi = rs.getString("diachi");

                Object[] row = {makh, tenkh, gioitinh, diachi};
                model.addRow(row);
                found = true;
            }

            if (!found) {
                int choice = JOptionPane.showOptionDialog(this,
                    "Không tìm thấy khách hàng nào với CCCD đã nhập!\n Đăng ký khách mới nhé<+-+>",
                    "Không tìm thấy",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    new String[]{"OK", "Cancel"},
                    "OK");

                if (choice == JOptionPane.OK_OPTION) {
                    this.dispose();
                        DangKyKhachMoi dkkm = new DangKyKhachMoi();
                        if (btnDangxuat.getText().equals("Quản lý")) {
                                dkkm.setmaql(manhanvien_Thuephong);
                        } else {
                            dkkm.setmanv(manhanvien_Thuephong);
                        }        
                        dkkm.setVisible(true);
                } else if (choice == JOptionPane.CANCEL_OPTION) {
                    // Xử lý khi người dùng chọn Cancel
                    // Ví dụ: Đóng cửa sổ hiện tại
                    this.dispose();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            } 
        }
        txtSeachCCCD.setText("");
    }//GEN-LAST:event_btnTimCCCD_ThuePhongActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        DangKyKhachMoi dkkm = new DangKyKhachMoi();
        if (btnDangxuat.getText().equals("Quản lý")) {
                dkkm.setmaql(manhanvien_Thuephong);
        } else {
            dkkm.setmanv(manhanvien_Thuephong);
        }        
        dkkm.setVisible(true);
        btChiTietPhieuThue.setEnabled(false);
        btThanhToan_ThuePhong.setEnabled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CapNhatPhongTrongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CapNhatPhongTrongActionPerformed
        loadRoomData();
        btChiTietPhieuThue.setEnabled(false);
    }//GEN-LAST:event_CapNhatPhongTrongActionPerformed
    
    private String taoMaHD() {    
        String ngayThang = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
        Random random = new Random();
        int randomNumber = random.nextInt(10000); // Số ngẫu nhiên từ 0 đến 9999
        String maHD = "HD" + ngayThang + String.format("%04d", randomNumber); // Format số ngẫu nhiên thành 4 chữ số
        return maHD;
    }

    private void btThanhToan_ThuePhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btThanhToan_ThuePhongActionPerformed
        int selectedRow = Table_PhieuThuePhong.getSelectedRow();
        btChiTietPhieuThue.setEnabled(false);
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một phiếu thuê để thanh toán.");
            return;
        }
        String maphieuthue = (String) Table_PhieuThuePhong.getValueAt(selectedRow, 0);
        String makhach = (String) Table_PhieuThuePhong.getValueAt(selectedRow, 1);
        String maphong = (String) Table_PhieuThuePhong.getValueAt(selectedRow, 2);
        String thanhtoan = (String) Table_PhieuThuePhong.getValueAt(selectedRow, 5);
        if (thanhtoan.equals("Đã thanh toán")) {
            JOptionPane.showMessageDialog(this, "Phiếu thuê " + maphieuthue + " đã được thanh toán!");
        } else if (thanhtoan.equals("Chưa thanh toán")) {            
            String mahd = taoMaHD();
            Hoadon hd = new Hoadon();
            this.dispose();
            if (btnDangxuat.getText().equals("Quản lý")) {
                hd.setMaQL(mahd, maphieuthue, makhach, maphong, manhanvien_Thuephong);
            } else {
                hd.setMaNV(mahd, maphieuthue, makhach, maphong, manhanvien_Thuephong);
            }            
            hd.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Trạng thái thanh toán không hợp lệ!");
        }
    }//GEN-LAST:event_btThanhToan_ThuePhongActionPerformed
    
    private void Table_PhieuThuePhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_PhieuThuePhongMouseClicked
        int row = Table_PhieuThuePhong.getSelectedRow();
        if (row != -1) {
            String maphieuthue = (String) Table_PhieuThuePhong.getValueAt(row, 0);
            String makhachhang = (String) Table_PhieuThuePhong.getValueAt(row, 1);
            String maphong = (String) Table_PhieuThuePhong.getValueAt(row, 2);
            String ngayden = (String) Table_PhieuThuePhong.getValueAt(row, 3);
            String ngaydi = (String) Table_PhieuThuePhong.getValueAt(row, 4);
            String ghichu = (String) Table_PhieuThuePhong.getValueAt(row, 6);

            // Hiển thị thông tin lên các thành phần giao diện
            txtmaphieu.setText(maphieuthue);
            txtMKH_ThuePhong.setText(makhachhang);
            txtMP_ThuePhong.setText(maphong);
            txtGhiChu.setText(ghichu);

            // Chuyển đổi ngày đến và ngày đi từ chuỗi sang định dạng Date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            try {
                Date dateNgayDen = dateFormat.parse(ngayden);
                Date dateNgayDi = dateFormat.parse(ngaydi);
                jDateDen.setDate(dateNgayDen);
                jDateDi.setDate(dateNgayDi);
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        }
        txtmaphieu.setEditable(false);
        txtMKH_ThuePhong.setEditable(false);
        txtMP_ThuePhong.setEditable(false);
        txtGhiChu.setEnabled(false);
        btnThue_ThuePhong.setEnabled(false);
        btChiTietPhieuThue.setEnabled(true);
        jDateDen.setEnabled(false);
        jDateDi.setEnabled(false);
        btSuaThongTinThue.setEnabled(true);
        btThanhToan_ThuePhong.setEnabled(true);
    }//GEN-LAST:event_Table_PhieuThuePhongMouseClicked

    private void txtmaphieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmaphieuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmaphieuActionPerformed

    private void btSuaThongTinThueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuaThongTinThueActionPerformed
        if ("Sửa".equals(btSuaThongTinThue.getText())) {
            btSuaThongTinThue.setText("Huỷ");
            btLuu.setEnabled(true);
            txtGhiChu.setEnabled(true);
            jDateDi.setEnabled(true);
        }              
        else if("Huỷ".equals(btSuaThongTinThue.getText()))
        {
            txtSeachCCCD.setText("");
            txtmaphieu.setText("");
            txtMKH_ThuePhong.setText("");
            txtMP_ThuePhong.setText("");
            jDateDen.setDate(null);
            jDateDi.setDate(null);        
            txtGhiChu.setText("");
            btSuaThongTinThue.setText("Sửa");
            btLuu.setEnabled(false);
        }     
    }//GEN-LAST:event_btSuaThongTinThueActionPerformed

    private void btnThue_ThuePhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThue_ThuePhongActionPerformed
        String makhachhang = txtMKH_ThuePhong.getText();
        String maphong = txtMP_ThuePhong.getText();

        Date ngayDenDate = jDateDen.getDate();
        Date ngayDiDate = jDateDi.getDate();
        if (ngayDenDate == null || ngayDiDate == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày đến và ngày đi!");
            return;
        }

        if (ngayDiDate.before(ngayDenDate)) {
            JOptionPane.showMessageDialog(this, "Ngày đi phải lớn hơn hoặc bằng ngày đến!");
            return;
        }
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String ngayden = dateFormat.format(ngayDenDate);
        String ngaydi = dateFormat.format(ngayDiDate);
        String thanhtoan = "Chưa thanh toán";
        String ghichu = txtGhiChu.getText();
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = KetNoi.ketNoi();

            // Truy vấn mã phiếu thuê lớn nhất hiện tại
            String sqlMaxMaPhieuThue = "SELECT MAX(maphieuthue) AS max_maphieuthue FROM phieuthue";
            pstmt = conn.prepareStatement(sqlMaxMaPhieuThue);
            rs = pstmt.executeQuery();
            String maphieuthue;
            if (rs.next()) {
                String maxMaPhieuThue = rs.getString("max_maphieuthue");
                if (maxMaPhieuThue != null) {
                    // Tăng mã phiếu thuê lên 1
                    int newMaPhieuThueInt = Integer.parseInt(maxMaPhieuThue.substring(3)) + 1;
                    maphieuthue = "MPT" + String.format("%05d", newMaPhieuThueInt);
                } else {
                    // Trường hợp bảng rỗng, bắt đầu với mã MPT00001
                    maphieuthue = "MPT00001";
                }
            } else {
                // Trường hợp bảng rỗng, bắt đầu với mã MPT00001
                maphieuthue = "MPT00001";
            }

            // Thêm bản ghi mới vào bảng phieuthue
            String sqlInsert = "INSERT INTO phieuthue (maphieuthue, makh, maphong, ngayden, ngaydi, thanhtoan, ghichu) VALUES (?,?,?,?,?,?,?)";
            pstmt = conn.prepareStatement(sqlInsert);
            pstmt.setString(1, maphieuthue);
            pstmt.setString(2, makhachhang.trim());
            pstmt.setString(3, maphong.trim());
            pstmt.setString(4, ngayden.trim());
            pstmt.setString(5, ngaydi.trim());
            pstmt.setString(6, thanhtoan.trim());
            pstmt.setString(7, ghichu.trim());
            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                // Cập nhật trạng thái của phòng
                String sqlUpdatePhong = "UPDATE phong SET tinhtrang = ? WHERE maphong = ?";
                pstmt = conn.prepareStatement(sqlUpdatePhong);
                pstmt.setString(1, makhachhang + " đang thuê");
                pstmt.setString(2, maphong.trim());
                pstmt.executeUpdate();

                // Hiển thị thông báo và cập nhật bảng
                JOptionPane.showMessageDialog(this, "Thêm dữ liệu thành công!");
                DefaultTableModel model = (DefaultTableModel) Table_PhieuThuePhong.getModel();
                Object[] row = {maphieuthue, makhachhang, maphong, ngayden, ngaydi, ghichu};
                model.addRow(row);
                loadRoomData();
                loadKhachHang();
                updateTableThuePhong();
            } else {
                JOptionPane.showMessageDialog(this, "Không thể thêm dữ liệu!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // Xóa trắng các trường dữ liệu
        txtmaphieu.setText("");
        txtGhiChu.setText("");
        txtMKH_ThuePhong.setText("");
        txtMP_ThuePhong.setText("");
        txtSeachCCCD.setText("");
        jDateDen.setDate(null);
        jDateDi.setDate(null);
    }//GEN-LAST:event_btnThue_ThuePhongActionPerformed

    private void btLoadThuephongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadThuephongActionPerformed
        updateTableThuePhong();
        
        txtmaphieu.setText("");
        txtGhiChu.setText("");
        txtMKH_ThuePhong.setText("");
        txtMP_ThuePhong.setText("");
        txtSeachCCCD.setText("");
        jDateDen.setDate(null);
        jDateDi.setDate(null);
        
        btSuaThongTinThue.setEnabled(false);
        btThanhToan_ThuePhong.setEnabled(false);
        btSuaThongTinThue.setText("Sửa");
        btnThue_ThuePhong.setEnabled(true);
        btChiTietPhieuThue.setEnabled(false);
        btLuu.setEnabled(false);
    }//GEN-LAST:event_btLoadThuephongActionPerformed

    private void btchuattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btchuattActionPerformed
        updateTablePhieuThueChuaTT();
    }//GEN-LAST:event_btchuattActionPerformed

    private void btChiTietPhieuThueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btChiTietPhieuThueActionPerformed
        String mapt = txtmaphieu.getText();
        String makhachhang = txtMKH_ThuePhong.getText();
        String maphong = txtMP_ThuePhong.getText();
        ChiTietPhieuThue ct = new ChiTietPhieuThue();
        if (btnDangxuat.getText().equals("Quản lý")) {
            ct.setMaQL(mapt, makhachhang, maphong, manhanvien_Thuephong);
        } else {
            ct.setMaNV(mapt, makhachhang, maphong, manhanvien_Thuephong);
        }
        this.dispose();
        ct.setVisible(true);
    }//GEN-LAST:event_btChiTietPhieuThueActionPerformed

    private void btLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLuuActionPerformed
        String maphieuthue = txtmaphieu.getText();
        String makhachhang = txtMKH_ThuePhong.getText();
        String maphong = txtMP_ThuePhong.getText();
        Date ngayDenDate = jDateDen.getDate();
        Date ngayDiDate = jDateDi.getDate();

        if (ngayDenDate == null || ngayDiDate == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày đến và ngày đi!");
            return;
        }

        if (ngayDiDate.before(ngayDenDate)) {
            JOptionPane.showMessageDialog(this, "Ngày đi phải lớn hơn hoặc bằng ngày đến!");
            return;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String ngayden = dateFormat.format(ngayDenDate);
        String ngaydi = dateFormat.format(ngayDiDate);
        String ghichu = txtGhiChu.getText();
        
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn sửa thông tin phiếu thuê có mã " + maphieuthue + " không?", "Xác nhận sửa thông tin", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = KetNoi.ketNoi();
            // Cập nhật thông tin của bản ghi đã tồn tại trong bảng phieuthue
            String sqlUpdate = "UPDATE phieuthue SET makh = ?, maphong = ?, ngayden = ?, ngaydi = ?, ghichu = ? WHERE maphieuthue = ?";
            pstmt = conn.prepareStatement(sqlUpdate);
            pstmt.setString(1, makhachhang.trim());
            pstmt.setString(2, maphong.trim());
            pstmt.setString(3, ngayden.trim());
            pstmt.setString(4, ngaydi.trim());
            pstmt.setString(5, ghichu.trim());
            pstmt.setString(6, maphieuthue.trim());

            int rowsUpdated = pstmt.executeUpdate();

            if (rowsUpdated > 0) {
                // Hiển thị thông báo và cập nhật bảng
                JOptionPane.showMessageDialog(this, "Sửa thông tin dữ liệu thành công!");
                updateTableThuePhong();
            } else {
                JOptionPane.showMessageDialog(this, "Không có bản ghi nào được sửa!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        txtSeachCCCD.setText("");
        txtmaphieu.setText("");
        txtMKH_ThuePhong.setText("");
        txtMP_ThuePhong.setText("");
        jDateDen.setDate(null);
        jDateDi.setDate(null);        
        txtGhiChu.setText("");
        btSuaThongTinThue.setText("Sửa");
        btLuu.setEnabled(false);
        btnThue_ThuePhong.setEnabled(true);
        btSuaThongTinThue.setEnabled(false);
        btThanhToan_ThuePhong.setEnabled(false);
    }//GEN-LAST:event_btLuuActionPerformed

    private void btnLoadallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadallActionPerformed
        loadALL();
    }//GEN-LAST:event_btnLoadallActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
        Login lg = new Login();
        lg.setmanv(manhanvien_Thuephong);
        lg.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void btDoimatkhauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDoimatkhauActionPerformed
        Doimatkhau dmk = new Doimatkhau();
        if (btnDangxuat.getText().equals("Quản lý")) {
            dmk.setMaQL(manhanvien_Thuephong);
        } else {
            dmk.setMaNV(manhanvien_Thuephong);
        }
        
        this.dispose();
        dmk.setVisible(true);
    }//GEN-LAST:event_btDoimatkhauActionPerformed

    private void btnDangxuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangxuatActionPerformed
        if (btnDangxuat.getText().equals("Quản lý")) {
            Menu mainForm = new Menu();                            
            mainForm.setmanv(manhanvien_Thuephong);
            this.dispose();
            mainForm.setVisible(true);
        }else{            
            Login lg = new Login();
            lg.setmanv(manhanvien_Thuephong);
            this.dispose();
            lg.setVisible(true);
        }
    }//GEN-LAST:event_btnDangxuatActionPerformed
    private void updateTableThuePhong() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = KetNoi.ketNoi(); // Mở kết nối đến cơ sở dữ liệu
            String sql = "SELECT maphieuthue, makh, maphong, ngayden, ngaydi, thanhtoan, ghichu FROM phieuthue";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) Table_PhieuThuePhong.getModel();
            model.setRowCount(0); // Xóa tất cả các dòng hiện có trong bảng

            // Lặp qua tất cả các hàng kết quả từ câu truy vấn
            while (rs.next()) {
                String maphieuthue = rs.getString("maphieuthue");
                String makhachhang = rs.getString("makh");
                String maphong = rs.getString("maphong");
                String ngayden = rs.getString("ngayden");
                String ngaydi = rs.getString("ngaydi");
                String thanhtoan = rs.getString("thanhtoan");
                String ghichu = rs.getString("ghichu");

                // Thêm hàng mới vào bảng
                Object[] row = {maphieuthue, makhachhang, maphong, ngayden, ngaydi, thanhtoan, ghichu};
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        } finally {
            try {
                // Đóng tất cả các tài nguyên
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            } 
        }
    }

    private void updateTablePhieuThueChuaTT(){
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        DefaultTableModel model = (DefaultTableModel) Table_PhieuThuePhong.getModel();

        try {
            conn = KetNoi.ketNoi();
            String sql = "SELECT * FROM phieuthue WHERE thanhtoan = 'Chưa thanh toán'";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();

            // Xóa tất cả các dòng trong bảng
            model.setRowCount(0);

            while (rs.next()) {
                String maphieuthue = rs.getString("maphieuthue");
                String makh = rs.getString("makh");
                String maphong = rs.getString("maphong");
                String ngayden = rs.getString("ngayden");
                String ngaydi = rs.getString("ngaydi");
                String thanhtoan = rs.getString("thanhtoan");
                String ghichu = rs.getString("ghichu");

                // Thêm dữ liệu vào bảng
                Object[] row = {maphieuthue, makh, maphong, ngayden, ngaydi, thanhtoan, ghichu};
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void updateRoomStatus() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        try {
            conn = KetNoi.ketNoi();
            // Cập nhật tình trạng phòng dựa trên ngày hôm nay và trạng thái thanh toán, với ngaydi lớn nhất
            String sql = "UPDATE phong p " +
                         "JOIN (SELECT maphong, MAX(ngaydi) AS max_ngaydi " +
                               "FROM phieuthue " +
                               "GROUP BY maphong) pt_max " +
                         "ON p.maphong = pt_max.maphong " +
                         "SET p.tinhtrang = 'Trống' " +
                         "WHERE pt_max.max_ngaydi < CURDATE()";
            pstmt = conn.prepareStatement(sql);
            int rowsUpdated = pstmt.executeUpdate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void loadRoomData() {
        try {
            updateRoomStatus();
            Connection conn = KetNoi.ketNoi();
            // Chỉ lấy những phòng có tình trạng 'Trống'
            String sql = "SELECT maphong, loaiphong, tinhtrang, gia, ghichu FROM phong WHERE tinhtrang = 'Trống'";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            DefaultTableModel model = (DefaultTableModel) tableDSphong_ThuePhong.getModel();
            model.setRowCount(0); // Xóa tất cả các dòng trong bảng

            while (rs.next()) {
                String maphong = rs.getString("maphong");
                String loaiphong = rs.getString("loaiphong");
                String tinhtrang = rs.getString("tinhtrang");
                String gia = rs.getString("gia");
                String ghichu = rs.getString("ghichu");

                Object[] row = {maphong, loaiphong, tinhtrang, gia, ghichu};
                model.addRow(row);
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        }
    }

    private void loadKhachHang() {
        try {
            Connection conn = KetNoi.ketNoi();
            String sql = "SELECT makh, tenkh, gioitinh, diachi FROM khachhang";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            DefaultTableModel model = (DefaultTableModel) tableKH_ThuePhong.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                String makh = rs.getString("makh");
                String tenkh = rs.getString("tenkh");
                String gioitinh = rs.getString("gioitinh");
                String diachi = rs.getString("diachi");

                Object[] row = {makh, tenkh, gioitinh, diachi};
                model.addRow(row);
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThuePhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThuePhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThuePhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThuePhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThuePhong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CapNhatPhongTrong;
    private javax.swing.JLabel Makh1;
    private javax.swing.JLabel Makh2;
    private javax.swing.JLabel Makh3;
    private javax.swing.JLabel Makh4;
    private javax.swing.JLabel Makh5;
    private javax.swing.JLabel Makh7;
    private javax.swing.JTable Table_PhieuThuePhong;
    private javax.swing.JButton btChiTietPhieuThue;
    private javax.swing.JButton btDoimatkhau;
    private javax.swing.JButton btLoadThuephong;
    private javax.swing.JButton btLuu;
    private javax.swing.JButton btSuaThongTinThue;
    private javax.swing.JButton btThanhToan_ThuePhong;
    private javax.swing.JButton btchuatt;
    private javax.swing.JButton btnDangxuat;
    private javax.swing.JButton btnLoadall;
    private javax.swing.JButton btnThue_ThuePhong;
    private javax.swing.JButton btnTimCCCD_ThuePhong;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateDen;
    private com.toedter.calendar.JDateChooser jDateDi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Label label1;
    private javax.swing.JTable tableDSphong_ThuePhong;
    private javax.swing.JTable tableKH_ThuePhong;
    private javax.swing.JTextField txtGhiChu;
    private javax.swing.JTextField txtMKH_ThuePhong;
    private javax.swing.JTextField txtMP_ThuePhong;
    private javax.swing.JTextField txtSeachCCCD;
    private javax.swing.JTextField txtmaphieu;
    // End of variables declaration//GEN-END:variables

    private void update(JTable Table_ThuePhong) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
